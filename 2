package item

import (
	"io/fs"
	"reflect"
	"testing"

	"github.com/dhemery/duffel/internal/file"
)

func TestIndexAccess(t *testing.T) {
	item := "myItem"

	index := NewIndex()

	gotSpec, err := index.Get(item)
	if err == nil {
		t.Errorf("want error, got none, spec: %v", gotSpec)
	}

	state := &file.State{Mode: fs.ModeSymlink, Dest: "my/item/dest"}
	wantSpec := Spec{Current: state, Desired: state}

	index.Set(item, wantSpec)

	gotSpec, err = index.Get(item)
	if err != nil {
		t.Error(err)
	}

	if !reflect.DeepEqual(gotSpec, wantSpec) {
		t.Errorf("spec:\nwant %v\n got %v", wantSpec, gotSpec)
	}
}

func TestIndexByItem(t *testing.T) {
	index := NewIndex()

	specMap := map[string]Spec{
		"dir1/sub1.1/file": {Current: &file.State{Mode: 0o644}},
		"dir1/sub1.1:/dir": {Current: &file.State{Mode: fs.ModeDir | 0o755}},
		"dir1/sub1.2/link": {Current: &file.State{Mode: fs.ModeSymlink, Dest: "some/link"}},
		"dir2/sub1.1/file": {Current: &file.State{Mode: 0o644}},
		"dir1/sub1.1/dir":  {Current: &file.State{Mode: fs.ModeDir | 0o755}},
		"dir1/sub1.3/link": {Current: &file.State{Mode: fs.ModeSymlink, Dest: "some/link"}},
	}
}
